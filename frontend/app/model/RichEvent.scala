package model

import configuration.Config
import model.Eventbrite.EBEvent
import services.MasterclassData

object RichEvent {
  case class Metadata(
    identifier: String,
    title: String,
    shortTitle: String,
    eventListUrl: String,
    termsUrl: String,
    largeImg: Boolean
  )

  val guLiveMetadata = Metadata("guardian-live", "Guardian Live events", "Events", controllers.routes.Event.list.url,
    Config.guardianLiveEventsTermsUrl, largeImg=true)
  val masterclassMetadata = Metadata("masterclasses", "Guardian Masterclasses", "Masterclasses",
    controllers.routes.Event.masterclasses.url, Config.guardianMasterclassesTermsUrl, largeImg=false)

  trait RichEvent {
    val event: EBEvent
    val imgUrl: String
    val socialImgUrl: String
    val tags: Seq[String]

    val metadata: Metadata
  }

  case class GuLiveEvent(event: EBEvent) extends RichEvent {
    val imgUrl = Config.eventImageUrlPath(event.id) + "/{width}{pixel_ratio}.jpg"
    val socialImgUrl = {
      // get the largest available image (for social media etc)
      // this mirrors the URL structure generated by Imager.js
      // so any changes there need to be reflected here
      val largestWidth = Config.eventImageWidths.toArray.last
      val largestRatio = Config.eventImageRatios.toArray.last
      Config.eventImageUrlPath(event.id) + "/" + largestWidth + "-" + largestRatio + "x.jpg"
    }

    val tags = Nil

    val metadata = guLiveMetadata
  }

  case class MasterclassEvent(event: EBEvent, data: Option[MasterclassData]) extends RichEvent {
    val imgUrl = data.flatMap(_.images.headOption).flatMap(_.file)
      .getOrElse(views.support.Asset.at("images/event-placeholder.gif"))
      .replace("http://static", "https://static-secure")
    val socialImgUrl = imgUrl

    val tags = event.description.map(_.html).flatMap(MasterclassEvent.extractTags).getOrElse(Nil)

    val metadata = masterclassMetadata
  }


  object MasterclassEvent {
    case class tagItem(categoryName: String, subCategories: Seq[String] = Seq())

    val tags = Seq(
      tagItem("Writing", Seq("Copywriting", "Creative writing", "Research", "Fiction", "Non-fiction")),
      tagItem("Publishing"),
      tagItem("Journalism"),
      tagItem("Business"),
      tagItem("Digital"),
      tagItem("Culture"),
      tagItem("Food and drink"),
      tagItem("Media")
    )

    // if a tag is hyphenated (Non-fiction) then weirdness/duplication happens here
    // so we replace it with an underscore in URLs (ugly, but limited alternatives)
    def encodeTag(tag: String) = tag.toLowerCase.replace("-", "_").replace(" ", "-")
    def decodeTag(tag: String) = tag.capitalize.replace("-", " ").replace("_", "-")

    def extractTags(s: String): Option[Seq[String]] =
      "<!--\\s*tags:(.*?)-->".r.findFirstMatchIn(s).map(_.group(1).split(",").toSeq.map(_.trim.toLowerCase))
  }

  implicit def eventToEBEvent(event: RichEvent): EBEvent = event.event

}

