define(['$', 'bean'], function ($, bean) {
    'use strict';

    var CURRENCY_ATTR = 'data-currency';
    var DATA_CURRENCY_SEL = '[' + CURRENCY_ATTR + ']';
    var PAYMENT_OPTIONS_CONTAINER_EL = $('.js-payment-options-container')[0];
    var CARD_DETAILS_NOTE_EL = $('.js-card-details-note')[0];
    var CARD_NOTE_CURRENCIES_ELS = $(DATA_CURRENCY_SEL, CARD_DETAILS_NOTE_EL);
    var CARD_NOTE_PERIOD = '.js-card-note-pricing-period';
    var CARD_NOTE_PRICING_CHARGE = '.js-card-note-pricing-charge';
    var SUBMIT_BTN_EL = $('.js-submit-input')[0];
    var DELIVERY_ADDRESS_EL = $('#country-deliveryAddress')[0];
    var BILLING_ADDRESS_EL = $('#country-billingAddress')[0];

    var checkoutForm = guardian.membership.checkoutForm;

    /**
     * Reads the currency value set on the 'guardian.membership.checkoutForm' model object.
     * Billing address will take priority over delivery address.
     *
     * @returns {String} a currency ISO code
     */
    checkoutForm.getCurrency = function () {
        return this.billingCurrency || this.deliveryCurrency;
    };

    /**
     * One way binding for the model object in 'guardian.membership.checkoutForm'.
     * This object is generated by the backend and mutated as the user interacts with the form.
     */

    function renderPrices(checkoutForm) {
        renderPaymentOptions(checkoutForm.getCurrency(), checkoutForm.billingPeriod);
        renderCardDetailsNotes(checkoutForm.getCurrency(), checkoutForm.billingPeriod);
        renderSubmitButton(checkoutForm.getCurrency(), checkoutForm.billingPeriod);
    }

    /**
     * Selects a country.
     *
     * Used on page page load to pre-select a country
     *
     * @param alpha2 A country code, coming from a select input option
     * @param selectEl The <select> element containing the country list
     */
    function selectCountry(alpha2, selectEl) {
        toArray($('option', selectEl)).forEach(function (el) {
            if ($(el).val() == alpha2) {
                $(el).attr('selected', 'selected');
            }
        });
    }

    function renderPaymentOptions(currency, billingPeriod) {
        console.info('renderPaymentOpts', arguments);
        toArray($(DATA_CURRENCY_SEL, PAYMENT_OPTIONS_CONTAINER_EL)).forEach(function (el) {
            toggleCurrency(currency, el);
            setBillingPeriod(el, billingPeriod);
        });
    }

    function renderCardDetailsNotes(currency, period) {
        toArray(CARD_NOTE_CURRENCIES_ELS).forEach(function (el) {
            toggleCurrency(currency, el);
        });

        var attr = 'data-' + period;
        var paymentTakenEl = $(dataCurrencySel(currency, CARD_NOTE_PRICING_CHARGE), CARD_DETAILS_NOTE_EL)[0];
        var periodEl = $(dataCurrencySel(currency, CARD_NOTE_PERIOD), CARD_DETAILS_NOTE_EL)[0];

        paymentTakenEl.innerHTML = paymentTakenEl.getAttribute(attr);
        periodEl.innerHTML = periodEl.getAttribute(attr);
    }

    function renderSubmitButton(currency, billingPeriod) {
        toArray($(DATA_CURRENCY_SEL, SUBMIT_BTN_EL)).forEach(function (el) {
            var elCurrency = $(el).attr('data-currency');
            var elBillingPeriod = $(el).attr('data-billing-period');

            if (currency === elCurrency && billingPeriod === elBillingPeriod) {
                el.classList.remove('is-hidden');
            } else {
                el.classList.add('is-hidden');
            }
        });
    }

    function setBillingPeriod(el, billingPeriod) {
        toArray(el.querySelectorAll('input[type="radio"]')).forEach(function (inputEl) {
            var elBillingPeriod = $(inputEl).val();
            if (elBillingPeriod === billingPeriod) {
                inputEl.setAttribute('checked', 'checked');
            }
            else {
                inputEl.removeAttribute('checked');
            }
        });
    }

    /**
     *
     *
     */
    var init = function () {
        selectCountry(checkoutForm.defaultCountry, DELIVERY_ADDRESS_EL);
        selectCountry(checkoutForm.defaultCountry, BILLING_ADDRESS_EL);

        if (PAYMENT_OPTIONS_CONTAINER_EL && checkoutForm) {
            renderPrices(checkoutForm);
            addListeners();
        }
    };

    var addListeners = function () {
        bean.on(PAYMENT_OPTIONS_CONTAINER_EL, 'click', 'input', function (e) {
            var input = e.target;
            checkoutForm.billingPeriod = $(input).val();
            renderPrices(checkoutForm);
        });

        [
         { elem: DELIVERY_ADDRESS_EL, attr: 'deliveryCurrency' },
         { elem: BILLING_ADDRESS_EL, attr: 'billingCurrency' }
        ].forEach(function (obj) {
            bean.on(obj.elem, 'change', function (e) {
                var input = e.target;
                var alpha2 = $(input).val();
                var selectedEl = toArray($('option', input)).filter(function (el) {
                    return $(el).val() === alpha2;
                })[0];
                checkoutForm[obj.attr] = $(selectedEl).attr(CURRENCY_ATTR);
                renderPrices(checkoutForm);
            });
        });
    };

    function toArray(nodeList) {
      return Array.prototype.slice.call(nodeList);
    }

    function toggleCurrency(currency, el) {
        if ($(el).attr('data-currency') === currency) {
            el.classList.remove('is-hidden');
        } else {
            el.classList.add('is-hidden');
        }
    }

    function dataCurrencySel(currency, selector) {
        var otherSelector = selector && ' ' + selector || '';
        return '[' + CURRENCY_ATTR + '=' + currency + ']' + otherSelector;
    }

    return {
        init: init
    };
});
